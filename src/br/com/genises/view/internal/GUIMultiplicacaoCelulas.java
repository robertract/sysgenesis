/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.genises.view.internal;

import br.com.genises.model.Celula;
import br.com.genises.model.Membro;
import br.com.genises.negocio.BCelula;
import br.com.genises.negocio.BMembro;
import br.com.genises.negocio.ComboMultidata;
import br.com.genises.view.exception.NegocioException;
import br.com.genises.view.util.mensages.JOptionPaneUtil;
import br.com.genises.view.util.tablemodel.CelulasTableModel;
import br.com.genises.view.util.tablemodel.MembroCelulaTableModel;
import br.com.genises.view.util.tablemodel.MembroCelulaTableModel2;
import java.awt.Dimension;
import java.awt.event.ItemListener;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;

/**
 *
 * @author Administrador
 */
public class GUIMultiplicacaoCelulas extends javax.swing.JInternalFrame {

    /**
     * Creates new form GUIAdicionarMembrosCelula
     */
    private String campoPesquisa = "";
    private List<String> camposPadrao;
    private String tipoCampo = "";
    private MembroCelulaTableModel tmMembros;
    private MembroCelulaTableModel2 tmMembros2;
    Membro membroSelecionado = new Membro();
    Celula celula1 = new Celula();
    Celula celula2 = new Celula();

    public GUIMultiplicacaoCelulas() throws Exception {

        tmMembros = new MembroCelulaTableModel(camposPadrao);
        tmMembros2 = new MembroCelulaTableModel2(camposPadrao);
        initComponents();
        carregarCombo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        cbCelula = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tMembros = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        cbCelula1 = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        tMembros1 = new javax.swing.JTable();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setClosable(true);
        setTitle("Sistema GÃªnises - Multiplicar Celulas");

        jLabel1.setText("Celula 1:");

        cbCelula.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione..." }));
        cbCelula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbCelulaActionPerformed(evt);
            }
        });

        tMembros.setModel(tmMembros);
        jScrollPane1.setViewportView(tMembros);

        jLabel3.setText("Celula 2:");

        cbCelula1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione..." }));
        cbCelula1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbCelula1ActionPerformed(evt);
            }
        });

        tMembros1.setModel(tmMembros2);
        jScrollPane2.setViewportView(tMembros1);

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/genises/util/imagens/seta direita .png"))); // NOI18N
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/genises/util/imagens/seta esquerda_vectorized.png"))); // NOI18N
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/genises/util/imagens/limpar_vectorized_1.png"))); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbCelula, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jButton5, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jButton6, javax.swing.GroupLayout.Alignment.TRAILING))
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbCelula1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(cbCelula, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton2)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel3)
                                .addComponent(cbCelula1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(39, 39, 39)
                                .addComponent(jButton5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton6)))))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        cbCelula.setSelectedIndex(0);
        cbCelula1.setSelectedIndex(0);
        tMembros.removeAll();
        tMembros1.removeAll();
        celula1 = new Celula();
        celula2 = new Celula();
        membros1 = new ArrayList<>();
        membros2 = new ArrayList<>();
        tmMembros.clear();
        tmMembros2.clear();


    }//GEN-LAST:event_jButton2ActionPerformed

    Membro mSelecionado1 = new Membro();

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        BCelula bC = new BCelula();
        mSelecionado1 = new Membro();

        try {
            int linhaSeleciona = tMembros.getSelectedRow();
            if (linhaSeleciona == -1) {
                throw new NegocioException("Selecione um membro!");
            }

            mSelecionado1 = tmMembros.getLista().get(linhaSeleciona);

            if (bC.membroPertence(celula2.getId(), mSelecionado1.getId()) == true) {
                JOptionPane.showMessageDialog(null, "O membro jÃ¡ pertence a celula selecionada!", "ERRO:", JOptionPane.ERROR_MESSAGE);
            } else {
                bC.gravarMembro(mSelecionado1, celula2);
                membros2.add(mSelecionado1);
                carregarTabela2();
                int resposta;

                Object[] options = {"Sim", "NÃ£o"};
                resposta = JOptionPane.showOptionDialog(null, "Deseja remover " + mSelecionado1.getNome()
                        + " da celula " + celula1.getNome() + "?", "InformaÃ§Ã£o",
                        JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);

                if (resposta == 0) {
                    bC.deletaMembro(mSelecionado1.getId(), celula1.getId());
                    carregarTabela();
                }
            }

        } catch (Exception ex) {
            JOptionPaneUtil.messageError(ex.getMessage());
        }


    }//GEN-LAST:event_jButton5ActionPerformed

    Membro mSelecionado2 = new Membro();
    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        BCelula bC = new BCelula();
        mSelecionado2 = new Membro();

        try {
            int linhaSeleciona = tMembros1.getSelectedRow();
            if (linhaSeleciona == -1) {
                throw new NegocioException("Selecione um membro!");
            }

            mSelecionado2 = tmMembros2.getLista().get(linhaSeleciona);

            if (bC.membroPertence(celula1.getId(), mSelecionado2.getId()) == true) {
                JOptionPane.showMessageDialog(null, "O membro jÃ¡ pertence a celula selecionada!", "ERRO:", JOptionPane.ERROR_MESSAGE);
            } else {
                bC.gravarMembro(mSelecionado2, celula1);
                membros1.add(mSelecionado2);
                carregarTabela();
                int resposta;

                Object[] options = {"Sim", "NÃ£o"};
                resposta = JOptionPane.showOptionDialog(null, "Deseja remover " + mSelecionado2.getNome()
                        + " da celula " + celula2.getNome() + "?", "InformaÃ§Ã£o",
                        JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);

                if (resposta == 0) {
                    bC.deletaMembro(mSelecionado2.getId(), celula2.getId());
                    carregarTabela2();
                }
            }

        } catch (Exception ex) {
            JOptionPaneUtil.messageError(ex.getMessage());
        }

    }//GEN-LAST:event_jButton6ActionPerformed

    private void cbCelulaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbCelulaActionPerformed
        if (cbCelula.getSelectedIndex() == 0) {

        } else {
            carregarTabela();
        }// TODO add your handling code here:
    }//GEN-LAST:event_cbCelulaActionPerformed

    private void cbCelula1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbCelula1ActionPerformed
        if (cbCelula1.getSelectedIndex() == 0) {

        } else {
            carregarTabela2();
        }
    }//GEN-LAST:event_cbCelula1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cbCelula;
    private javax.swing.JComboBox<String> cbCelula1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tMembros;
    private javax.swing.JTable tMembros1;
    // End of variables declaration//GEN-END:variables
    BCelula bCelula = new BCelula();

    private void carregarCombo() throws Exception {
        try {
            List<Celula> celulas = new ArrayList<>();

            celulas = bCelula.listarCelulas();

            DefaultComboBoxModel comboModel = (DefaultComboBoxModel) cbCelula.getModel();
            DefaultComboBoxModel comboModel1 = (DefaultComboBoxModel) cbCelula1.getModel();

            for (int linha = 0; linha < celulas.size(); linha++) {
                //pegando a categoria da lista
                Celula categoria = celulas.get(linha);
                //adicionando a categoria no combo
                comboModel.addElement(categoria);
                comboModel1.addElement(categoria);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "NÃ£o existem celulas cadastradas!");
            this.dispose();
        }
    }
    List<Membro> membros1 = new ArrayList<>();
    List<Membro> membros2 = new ArrayList<>();

    private void pesquisarMembros2(long id) throws Exception {

        membros2 = bCelula.pesquisarMembros(id);

        carregarGrid2(membros2);

    }

    private void pesquisarMembros(long id) throws Exception {

        membros1 = bCelula.pesquisarMembros(id);

        carregarGrid(membros1);

    }

    private void carregarGrid2(List<Membro> membros) {
        try {
            tmMembros2.clear();

            if (membros.isEmpty()) {
                JOptionPane.showMessageDialog(this, "A Celula selecionada ainda nÃ£o possui membros!");
            } else {
                tmMembros2.adicionaList(membros);
            }
        } catch (NegocioException ex) {
            JOptionPaneUtil.messageInformation(ex.getMessage());
        } catch (Exception ex) {
            //   ex.printStackTrace();
//            Celula celula = new Celula();
//            tmCelulas.adiciona(celula);
        }

    }

    private void carregarGrid(List<Membro> membros) {
        try {
            tmMembros.clear();

            if (membros.isEmpty()) {
                JOptionPane.showMessageDialog(this, "A Celula selecionada ainda nÃ£o possui membros!");
            } else {
                tmMembros.adicionaList(membros);
            }
        } catch (NegocioException ex) {
            JOptionPaneUtil.messageInformation(ex.getMessage());
        } catch (Exception ex) {
            //   ex.printStackTrace();
//            Celula celula = new Celula();
//            tmCelulas.adiciona(celula);
        }

    }

    private void carregarTabela() {
        try {

            if (cbCelula.getSelectedIndex() == 0 && cbCelula1.getSelectedIndex() == 0) {
                JOptionPane.showMessageDialog(this, "Selecione as celulas que deseja multiplicar!");
                tmMembros.clear();
            } else {
                celula1 = (Celula) cbCelula.getSelectedItem();

                if (cbCelula1.getSelectedIndex() == 0) {
                    pesquisarMembros(celula1.getId());
                } else {
                    celula2 = (Celula) cbCelula1.getSelectedItem();
                    if (celula1.getId() == celula2.getId()) {
                        JOptionPane.showMessageDialog(this, "Selecione celulas diferentes!");
                        tmMembros.clear();
                    } else {
                        pesquisarMembros(celula1.getId());
                    }
                }
            }

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Selecione uma celula vÃ¡lida!");
        }

    }

    private void carregarTabela2() {
        try {

            if (cbCelula1.getSelectedIndex() == 0 && cbCelula.getSelectedIndex() == 0) {
                JOptionPane.showMessageDialog(this, "Selecione as celulas que deseja multiplicar!");
                tmMembros2.clear();
            } else {
                celula2 = (Celula) cbCelula1.getSelectedItem();

                if (cbCelula.getSelectedIndex() == 0) {
                    pesquisarMembros2(celula2.getId());
                } else {
                    celula1 = (Celula) cbCelula.getSelectedItem();
                    if (celula2.getId() == celula1.getId()) {
                        JOptionPane.showMessageDialog(this, "Selecione celulas diferentes!");
                        tmMembros2.clear();
                    } else {
                        pesquisarMembros2(celula2.getId());
                    }
                }
            }

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Selecione uma celula vÃ¡lida!");
        }

    }
}
