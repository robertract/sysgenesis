/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.genises.view.internal;

import br.com.genises.view.exception.NegocioException;
import br.com.genises.view.util.mensages.JOptionPaneUtil;
import br.com.genises.view.util.tablemodel.Tabela;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JInternalFrame;
import static tools.devnull.trugger.scan.ClassScan.scan;


/**
 *
 * @author Tiago
 */
public class GUICampos extends javax.swing.JDialog {

    /**
     * Creates new form GUICampos
     */
    private Object object;
    final DefaultListModel model = new DefaultListModel();
    final DefaultListModel modelSelecionado = new DefaultListModel();
    private JInternalFrame frame;

    public GUICampos(Object objeto, JInternalFrame frame) throws Exception {
        initComponents();
        jListaCompleta.setModel(model);
        jListSelecionada.setModel(modelSelecionado);
        //  this.setLayout(new FlowLayout());
        this.object = objeto;
        this.frame = frame;

        adiciona();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jListaCompleta = new javax.swing.JList();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListSelecionada = new javax.swing.JList();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("SysGenesis - Campos");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jScrollPane1.setViewportView(jListaCompleta);

        jButton1.setText(">>");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("<<");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(jListSelecionada);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton2)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addComponent(jButton1)
                .addGap(31, 31, 31)
                .addComponent(jButton2)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jScrollPane2)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        try {
            int tamanhoLista = jListSelecionada.getModel().getSize();
            ArrayList listaPalavras = new ArrayList();

            for (int i = 0; i < tamanhoLista; i++) {
                listaPalavras.add(jListSelecionada.getModel().getElementAt(i));
            }
            if (listaPalavras.isEmpty()) {
                throw new NegocioException("Selecione ao Menos um Campo!");
            }
            if (frame instanceof GUIUsuario) {
                GUIUsuario a = (GUIUsuario) frame;
                a.atualizaTabela(listaPalavras);
            }
            if (frame instanceof GUIPagar) {
                GUIPagar pagar = (GUIPagar) frame;
                pagar.atualizaTabela(listaPalavras);
            }
            if (frame instanceof GUIPlanoConta) {
                GUIPlanoConta planoConta = (GUIPlanoConta) frame;
                planoConta.atualizaTabela(listaPalavras);
            }
            if (frame instanceof GUIFornecedor) {
                GUIFornecedor a = (GUIFornecedor) frame;
                a.atualizaTabela(listaPalavras);
            }
            if (frame instanceof GUICaixa) {
                GUICaixa a = (GUICaixa) frame;
                a.atualizaTabela(listaPalavras);
            }
        } catch (NegocioException e) {
            JOptionPaneUtil.messageInformation(e.getMessage());
        } catch (Exception ex) {
            JOptionPaneUtil.messageError(ex.getMessage());

        }
    }//GEN-LAST:event_formWindowClosing

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            int[] a = jListaCompleta.getSelectedIndices();
            for (int b : a) {
                System.out.println("PEgo: " + jListaCompleta.getModel().getElementAt(b));
                modelSelecionado.addElement(jListaCompleta.getModel().getElementAt(b));
                model.remove(b);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            int[] a = jListSelecionada.getSelectedIndices();
            for (int b : a) {
                System.out.println("PEgo: " + jListSelecionada.getModel().getElementAt(b));
                model.addElement(jListSelecionada.getModel().getElementAt(b));
                modelSelecionado.remove(b);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JList jListSelecionada;
    private javax.swing.JList jListaCompleta;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables

    private void adiciona() throws Exception {
        int qtd = 0;

        for (Method metodo : object.getClass().getDeclaredMethods()) {
            if (metodo.isAnnotationPresent(Tabela.class)) {
                // Tabela anotacao = metodo.getAnnotation(Tabela.class);
                qtd++;

            }
        }
        System.out.println("QTD: " + qtd);
        //  for (int i = 0; i < qtd; i++) {
        for (Method metodo : object.getClass().getDeclaredMethods()) {
            if (metodo.isAnnotationPresent(Tabela.class)) {
                Tabela anotacao = metodo.getAnnotation(Tabela.class);
                // if (anotacao.posicao() == i) {
                if (anotacao.tipoAtributo().equals("object")) {
                    Object obje = metodo.invoke(object);
                    List<Class> classes = scan().classes().deep().in("br.com.genises.model");
                    System.out.println(obje);
                    for (Class c : classes) {
                        if (c.equals(obje.getClass())) {
                            System.out.println(c.getClass() + "São objetos iguais" + c);

                            for (Method metodoInterno : c.getDeclaredMethods()) {
                                if (metodoInterno.isAnnotationPresent(Tabela.class)) {
                                    Tabela anotacaoInterno = metodoInterno.getAnnotation(Tabela.class);
                                    if (anotacaoInterno.visivelOutraTela() == true) {
                                        model.add(model.getSize(), anotacaoInterno.nomeOutraTela());
                                        System.out.print("é de outra classe : adicionou!");
                                    }
                                }
                            }
                        }
                    }

                } else {
                    model.add(model.getSize(), anotacao.nome());
                    System.out.println("Adicionou");
                }
            }
            //  }

        }
    }

}
