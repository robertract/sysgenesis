/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.genises.view.internal;

import br.com.genises.model.Celula;
import br.com.genises.model.Membro;
import br.com.genises.negocio.BCelula;
import br.com.genises.negocio.BMembro;
import br.com.genises.negocio.ComboMultidata;
import br.com.genises.view.exception.NegocioException;
import br.com.genises.view.util.mensages.JOptionPaneUtil;
import br.com.genises.view.util.tablemodel.CelulasTableModel;
import br.com.genises.view.util.tablemodel.MembroCelulaTableModel;
import br.com.genises.view.util.tablemodel.MembroCelulaTableModel2;
import java.awt.Dimension;
import java.awt.event.ItemListener;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;

/**
 *
 * @author Administrador
 */
public class GUIRemoveMembros extends javax.swing.JInternalFrame {

    /**
     * Creates new form GUIAdicionarMembrosCelula
     */
    private String campoPesquisa = "";
    private List<String> camposPadrao;
    private String tipoCampo = "";
    private MembroCelulaTableModel tmMembros;
    private MembroCelulaTableModel2 tmMembros2;
    Membro membroSelecionado = new Membro();
    Celula celula1 = new Celula();
    Celula celula2 = new Celula();

    public GUIRemoveMembros() throws Exception {

        tmMembros = new MembroCelulaTableModel(camposPadrao);
        tmMembros2 = new MembroCelulaTableModel2(camposPadrao);
        initComponents();
        carregarCombo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        cbCelula = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tMembros = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setClosable(true);
        setTitle("Sistema Gênises - Multiplicar Celulas");

        jLabel1.setText("Celula 1:");

        cbCelula.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione..." }));
        cbCelula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbCelulaActionPerformed(evt);
            }
        });

        tMembros.setModel(tmMembros);
        jScrollPane1.setViewportView(tMembros);

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/genises/util/imagens/limpar_vectorized_1.png"))); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton1.setText("Remover");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setText("Cancelar");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(4, 4, 4)
                        .addComponent(cbCelula, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(jButton2)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jButton3)
                .addGap(103, 103, 103))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel1))
                    .addComponent(cbCelula, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addGap(6, 6, 6)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton3))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        cbCelula.setSelectedIndex(0);
        tMembros.removeAll();
        celula1 = new Celula();
        celula2 = new Celula();
        membros1 = new ArrayList<>();
        membros2 = new ArrayList<>();
        tmMembros.clear();
        tmMembros2.clear();


    }//GEN-LAST:event_jButton2ActionPerformed

    Membro mSelecionado1 = new Membro();

    Membro mSelecionado2 = new Membro();
    private void cbCelulaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbCelulaActionPerformed
        if (cbCelula.getSelectedIndex() == 0) {

        } else {
            try {
                carregarTabela();
            } catch (Exception ex) {
                Logger.getLogger(GUIRemoveMembros.class.getName()).log(Level.SEVERE, null, ex);
            }
        }// TODO add your handling code here:
    }//GEN-LAST:event_cbCelulaActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int resposta;
        BCelula bC = new BCelula();

        try {
            int linhaSeleciona = tMembros.getSelectedRow();
            if (linhaSeleciona == -1) {
                throw new NegocioException("Selecione um membro!");
            }

            mSelecionado1 = tmMembros.getLista().get(linhaSeleciona);

            Object[] options = {"Sim", "Não"};
            resposta = JOptionPane.showOptionDialog(null, "Deseja remover " + mSelecionado1.getNome()
                    + " da celula " + celula1.getNome() + "?", "Informação",
                    JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);

            if (resposta == 0) {
                bC.deletaMembro(mSelecionado1.getId(), celula1.getId());
                JOptionPane.showMessageDialog(null, "Membro removido da celula!");
                carregarTabela();
            }
        } catch (Exception ex) {
            Logger.getLogger(GUIRemoveMembros.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cbCelula;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tMembros;
    // End of variables declaration//GEN-END:variables
    BCelula bCelula = new BCelula();

    private void carregarCombo() throws Exception {
        try {
            List<Celula> celulas = new ArrayList<>();

            celulas = bCelula.listarCelulas();

            DefaultComboBoxModel comboModel = (DefaultComboBoxModel) cbCelula.getModel();

            for (int linha = 0; linha < celulas.size(); linha++) {
                //pegando a categoria da lista
                Celula categoria = celulas.get(linha);
                //adicionando a categoria no combo
                comboModel.addElement(categoria);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Não existem celulas cadastradas!");
            this.dispose();
        }
    }
    List<Membro> membros1 = new ArrayList<>();
    List<Membro> membros2 = new ArrayList<>();

    private void pesquisarMembros2(long id) throws Exception {

        membros2 = bCelula.pesquisarMembros(id);

        carregarGrid2(membros2);

    }

    private void pesquisarMembros(long id) throws Exception {

        membros1 = bCelula.pesquisarMembros(id);

        carregarGrid(membros1);

    }

    private void carregarGrid2(List<Membro> membros) {
        try {
            tmMembros2.clear();

            if (membros.isEmpty()) {
                JOptionPane.showMessageDialog(this, "A Celula selecionada ainda não possui membros!");
            } else {
                tmMembros2.adicionaList(membros);
            }
        } catch (NegocioException ex) {
            JOptionPaneUtil.messageInformation(ex.getMessage());
        } catch (Exception ex) {
            //   ex.printStackTrace();
//            Celula celula = new Celula();
//            tmCelulas.adiciona(celula);
        }

    }

    private void carregarGrid(List<Membro> membros) {
        try {
            tmMembros.clear();

            if (membros.isEmpty()) {
                JOptionPane.showMessageDialog(this, "A Celula selecionada ainda não possui membros!");
            } else {
                tmMembros.adicionaList(membros);
            }
        } catch (NegocioException ex) {
            JOptionPaneUtil.messageInformation(ex.getMessage());
        } catch (Exception ex) {
            //   ex.printStackTrace();
//            Celula celula = new Celula();
//            tmCelulas.adiciona(celula);
        }

    }

    private void carregarTabela() throws Exception {
        try {

            if (cbCelula.getSelectedIndex() == 0) {
                JOptionPane.showMessageDialog(this, "Selecione uma celula para remover membros!");
                tmMembros.clear();
            } else {
                celula1 = (Celula) cbCelula.getSelectedItem();

                pesquisarMembros(celula1.getId());
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Selecione uma celula válida!");
        }

    }

}
