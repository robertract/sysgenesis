/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.genises.view.internal;

import br.com.genises.dao.DaoUsuarioLista;
import br.com.genises.model.Historico;
import br.com.genises.model.Membro;
import br.com.genises.model.Usuario;
import br.com.genises.negocio.BHistorico;
import br.com.genises.view.GUIPrincipal;
import br.com.genises.view.exception.NegocioException;
import br.com.genises.view.util.mensages.JOptionPaneUtil;
import br.com.genises.view.util.tablemodel.HistoricoTableModel;
import br.com.genises.view.util.tablemodel.Tabela;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JInternalFrame;

/**
 *
 * @author rober
 */
public class GUIListaHistoricos extends javax.swing.JDialog {

    /**
     * Creates new form GUIListaHistoricos
     */
    private String campoPesquisa = "";
    private List<String> camposPadrao;
    private String tipoCampo = "";
    JInternalFrame principal;

    public GUIListaHistoricos(JInternalFrame frame) {
//
//        carregaPadrao();
//        tmHistorico = new HistoricoTableModel(camposPadrao);
//        principal = frame;
//        Historico h = new Historico();
//        tmHistorico.adiciona(h);
//        historicos = new ArrayList<>();
//        pesquisar();
//        initComponents();
//        formataTabela(Historico.class);
//        setLocationRelativeTo(null);
        carregaPadrao();

        tmHistoricoTableModel = new HistoricoTableModel(camposPadrao);

        Historico u = new Historico();
        tmHistoricoTableModel.adiciona(u);
        historicos = new ArrayList<>();

        initComponents();
        formataTabela(Historico.class);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tHistorico = new javax.swing.JTable();

        setTitle("GÃªnesis - Lista de Historicos");

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/genises/util/imagens/login_vectorized_vectorized.png"))); // NOI18N
        jButton1.setText("Selecionar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/genises/util/imagens/sair_vectorized_vectorized.png"))); // NOI18N
        jButton2.setText("Fechar");

        tHistorico.setModel(tmHistoricoTableModel);
        jScrollPane1.setViewportView(tHistorico);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(80, 80, 80)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        selecionar();


    }//GEN-LAST:event_jButton1ActionPerformed
    private HistoricoTableModel tmHistoricoTableModel;
    private BHistorico bHistorico = new BHistorico();
    private List<Historico> historicos;

    private void carregaPadrao() {
        try {
            camposPadrao = new ArrayList<String>();
            if (camposPadrao == null) {
                camposPadrao = new ArrayList<String>();

                for (Method metodo : Historico.class.getDeclaredMethods()) {
                    if (metodo.isAnnotationPresent(Tabela.class)) {
                        Tabela anotacao = metodo.getAnnotation(Tabela.class);
                        camposPadrao.add(anotacao.nome());
                    }
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private void pesquisar() {
        try {
            camposPadrao = new ArrayList<String>();
            DaoUsuarioLista dao = new DaoUsuarioLista();
            camposPadrao = dao.verificaPadrao("Historico.class", GUIPrincipal.usuarioLogado.getId());
            if (camposPadrao == null) {
                camposPadrao = new ArrayList<String>();

                for (Method metodo : Historico.class.getDeclaredMethods()) {
                    if (metodo.isAnnotationPresent(Tabela.class)) {
                        Tabela anotacao = metodo.getAnnotation(Tabela.class);
                        camposPadrao.add(anotacao.nome());
                    }
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tHistorico;
    // End of variables declaration//GEN-END:variables

    private void selecionar() {

        GUICadastroCheque c = (GUICadastroCheque) principal;
        Historico historico = null;

        int linhaSeleciona = tHistorico.getSelectedRow();
        if (linhaSeleciona == -1) {
            throw new NegocioException("Selecione um historico!");
        } else {
            historico = tmHistoricoTableModel.getLista().get(linhaSeleciona);
            c.h = historico;
            c.setarHistorico(historico);
            this.dispose();
        }

    }

    private void formataTabela(Class classe) {
        tHistorico.setAutoResizeMode(tHistorico.AUTO_RESIZE_OFF);
        int numeroColunas = tmHistoricoTableModel.getColumnCount();
        int numero = 0;
        while (numeroColunas != numero) {
            for (Method metodo : classe.getDeclaredMethods()) {
                if (metodo.isAnnotationPresent(Tabela.class)) {
                    Tabela anotacao = metodo.getAnnotation(Tabela.class);
                    if (anotacao.nome().equals(tmHistoricoTableModel.getColumnName(numero))) {
                        tHistorico.getColumnModel().getColumn(numero).setPreferredWidth(anotacao.tamanho());
                    }
                }
            }

            numero++;
        }
    }

}
